{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","aboutText","toggleMode","role","htmlFor","defaultProps","TextForm","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","map","currentValue","slice","join","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","word","lower","charAt","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a8ef5841.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    const toggleStyle = ()=>{\r\n        if(myStyle.color === 'black'){\r\n            setMyStyle({ \r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n                \r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({ \r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Navbar = (props) => {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/About\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=Name=\"d-flex\">\r\n            <input\r\n              className=Name=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=Name=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable DarkMode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"about text here\",\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\n\r\nconst TextForm = (props) => {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Upercase was clicked : \"+text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase!\",\"success\")\r\n  };\r\n  const handleLowClick = () => {\r\n    // console.log(\"Upercase was clicked : \"+text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase!\",\"success\")\r\n  };\r\n  const handleClear = () => {\r\n    // console.log(\"Upercase was clicked : \"+text);\r\n    // let newText=text.toLowerCase();\r\n    setText(\"\");\r\n    props.showAlert(\"TextArea is cleared\",\"success\")\r\n  };\r\n  const intoTitleCase = () => {\r\n    let newText = text.split(\" \").map((currentValue) => {\r\n      let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\r\n      return newText;\r\n    });\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"First letter has been Capitalized\",\"success\")\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change was called just now\");\r\n    setText(event.target.value);\r\n  };\r\n  // const handlespaces = () => {\r\n  //   let newtext = text.trim();\r\n  //   setText(newtext);\r\n\r\n  // };\r\n \r\n  const handleCopy=()=>{\r\n    var text=document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text has been copied\",\"success\")\r\n  }\r\n\r\n  const handleExtraSpaces=()=>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Extra spaces has been trimmed out\",\"success\")\r\n  }\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // text=\"new  text\";   wrong way to change the state\r\n  // setText=(\"Hey enter \");  //correct way to change the state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to upperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>\r\n          Convert to lowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClear}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={intoTitleCase}>\r\n          Chage only first character\r\n        </button>\r\n\r\n        {/* <button className=\"btn btn-primary mx-2 my-2\" onClick={handlespaces}>\r\n          Clear Spaces\r\n        </button> */}\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>\r\n          Clear Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>\r\n          <b>Your text summary</b>\r\n        </h1>\r\n        <p>\r\n          {\" \"}\r\n          {text.split(\" \").length} <b>words</b> and {text.length}{\" \"}\r\n          <b>characters</b>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          {0.008 * text.split(\" \").length} <b>Minutes read</b>{\" \"}\r\n        </p>\r\n        <h2>preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter something to preview here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextForm;\r\n","import React from \"react\";\r\n\r\nconst Alert = (props) => {\r\n    const capitalize=(word)=>\r\n    {\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert&&<div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n      <strong>{capitalize(props.alert.type)}</strong> :{props.alert.msg}\r\n  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nconst App = () => {\n  const [mode, setMode] = useState(\"light\"); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils- Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils- Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About Text\" /> */}\n      {/* <Navbar/> */}\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n            <Route exact path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze below\"\n                mode={mode}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}